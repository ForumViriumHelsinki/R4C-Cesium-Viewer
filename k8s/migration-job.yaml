apiVersion: batch/v1
kind: Job
metadata:
  name: r4c-cesium-viewer-migration
  labels:
    app.kubernetes.io/name: r4c-cesium-viewer
    app.kubernetes.io/instance: r4c-cesium-viewer
    app.kubernetes.io/component: migration
spec:
  ttlSecondsAfterFinished: 300
  backoffLimit: 10
  template:
    metadata:
      labels:
        app.kubernetes.io/name: r4c-cesium-viewer
        app.kubernetes.io/instance: r4c-cesium-viewer
        app.kubernetes.io/component: migration
    spec:
      restartPolicy: Never
      initContainers:
      - name: wait-for-postgres
        image: postgres:15-alpine
        command:
        - sh
        - -c
        - |
          echo "üîç Waiting for PostgreSQL to be ready..."
          until pg_isready -h postgresql -p 5432 -U regions4climate_user; do
            echo "   PostgreSQL not ready, waiting..."
            sleep 5
          done
          echo "‚úÖ PostgreSQL is ready"

          echo "üîç Checking database connectivity..."
          export PGPASSWORD="${DB_PASSWORD}"
          until psql -h postgresql -p 5432 -U regions4climate_user -d regions4climate -c "SELECT 1;" > /dev/null 2>&1; do
            echo "   Database not accessible, waiting..."
            sleep 5
          done
          echo "‚úÖ Database connection verified"
        env:
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: r4c-cesium-viewer-migration-secret
              key: password
      containers:
      - name: dbmate
        image: frontend  # This will be replaced by Skaffold
        command:
        - sh
        - -c
        - |
          set -e
          echo "üöÄ Starting database migration..."
          echo "üìã Database: regions4climate"
          echo "üìã Host: postgresql:5432"
          echo "üìã Migrations directory: /migrations"

          # Ensure PostGIS extensions exist
          echo "üîß Ensuring PostGIS extensions..."
          psql "$DATABASE_URL_ADMIN" -c "CREATE EXTENSION IF NOT EXISTS postgis;" || echo "‚ö†Ô∏è  PostGIS extension creation failed (may already exist)"
          psql "$DATABASE_URL_ADMIN" -c "CREATE EXTENSION IF NOT EXISTS postgis_topology;" || echo "‚ö†Ô∏è  PostGIS topology extension creation failed (may already exist)"

          # Transfer ownership of all existing tables to migration user
          echo "üîë Transferring table ownership to migration user..."
          psql "$DATABASE_URL_ADMIN" <<'EOSQL' || echo "‚ö†Ô∏è  Table ownership transfer failed or no tables exist yet"
DO $$
DECLARE
    migration_user TEXT := 'regions4climate_user';
    tbl RECORD;
    owner_role TEXT;
BEGIN
    -- First, grant admin user membership in all table owner roles (for Cloud SQL IAM users)
    FOR owner_role IN
        SELECT DISTINCT tableowner
        FROM pg_tables
        WHERE schemaname = 'public'
        AND tableowner != migration_user
        AND tableowner != CURRENT_USER
    LOOP
        BEGIN
            EXECUTE format('GRANT %I TO CURRENT_USER', owner_role);
            RAISE NOTICE 'Granted role % to admin user for ownership transfer', owner_role;
        EXCEPTION
            WHEN OTHERS THEN
                RAISE WARNING 'Could not grant role %: %', owner_role, SQLERRM;
        END;
    END LOOP;

    -- Transfer ownership of all tables
    FOR tbl IN
        SELECT schemaname, tablename, tableowner
        FROM pg_tables
        WHERE schemaname = 'public'
        AND tableowner != migration_user
    LOOP
        BEGIN
            EXECUTE format('ALTER TABLE %I.%I OWNER TO %I',
                tbl.schemaname, tbl.tablename, migration_user);
            RAISE NOTICE 'Transferred ownership of %.% from % to %',
                tbl.schemaname, tbl.tablename, tbl.tableowner, migration_user;
        EXCEPTION
            WHEN OTHERS THEN
                RAISE WARNING 'Could not transfer table %.%: %',
                    tbl.schemaname, tbl.tablename, SQLERRM;
        END;
    END LOOP;

    -- Transfer ownership of all sequences
    FOR tbl IN
        SELECT schemaname, sequencename, sequenceowner
        FROM pg_sequences
        WHERE schemaname = 'public'
        AND sequenceowner != migration_user
    LOOP
        BEGIN
            EXECUTE format('ALTER SEQUENCE %I.%I OWNER TO %I',
                tbl.schemaname, tbl.sequencename, migration_user);
            RAISE NOTICE 'Transferred ownership of sequence %.% to %',
                tbl.schemaname, tbl.sequencename, migration_user;
        EXCEPTION
            WHEN OTHERS THEN
                RAISE WARNING 'Could not transfer sequence %.%: %',
                    tbl.schemaname, tbl.sequencename, SQLERRM;
        END;
    END LOOP;

    -- Transfer ownership of all materialized views
    FOR tbl IN
        SELECT schemaname, matviewname, matviewowner
        FROM pg_matviews
        WHERE schemaname = 'public'
        AND matviewowner != migration_user
    LOOP
        BEGIN
            EXECUTE format('ALTER MATERIALIZED VIEW %I.%I OWNER TO %I',
                tbl.schemaname, tbl.matviewname, migration_user);
            RAISE NOTICE 'Transferred ownership of materialized view %.% to %',
                tbl.schemaname, tbl.matviewname, migration_user;
        EXCEPTION
            WHEN OTHERS THEN
                RAISE WARNING 'Could not transfer materialized view %.%: %',
                    tbl.schemaname, tbl.matviewname, SQLERRM;
        END;
    END LOOP;
END $$;
EOSQL

          # Run migrations
          echo "‚¨ÜÔ∏è  Running database migrations..."
          if dbmate status; then
            echo "üìä Current migration status:"
            dbmate status
          else
            echo "üÜï No migration history found, will create schema_migrations table"
          fi

          if dbmate up; then
            echo "‚úÖ Migrations applied successfully"
            echo "üìä Final migration status:"
            dbmate status

            # Verify key tables exist
            echo "üîç Verifying critical tables exist..."
            psql "$DATABASE_URL" -c "SELECT COUNT(*) as table_count FROM information_schema.tables WHERE table_schema = 'public' AND table_type = 'BASE TABLE';" | grep -E "table_count|[0-9]+"

            # Check specific table that pygeoapi needs
            if psql "$DATABASE_URL" -c "SELECT 1 FROM r4c_hsy_building_current LIMIT 1;" > /dev/null 2>&1; then
              echo "‚úÖ r4c_hsy_building_current table exists and is accessible"
            else
              echo "‚ùå r4c_hsy_building_current table missing or inaccessible"
              exit 1
            fi
          else
            echo "‚ùå Migration failed"
            exit 1
          fi

          echo "üéâ Database migration completed successfully"
        env:
        - name: DATABASE_URL
          value: "postgres://regions4climate_user:regions4climate_pass@postgresql:5432/regions4climate?sslmode=disable"
        - name: DATABASE_URL_ADMIN
          value: "postgres://postgres:postgres@postgresql:5432/regions4climate?sslmode=disable"
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: r4c-cesium-viewer-migration-secret
              key: password
        - name: ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: r4c-cesium-viewer-migration-secret
              key: admin-password
        - name: DBMATE_MIGRATIONS_DIR
          value: /migrations
        - name: DBMATE_NO_DUMP_SCHEMA
          value: "true"
        resources:
          limits:
            cpu: 200m
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 64Mi
