name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  # Common environment variables for all jobs
  CI: true
  NODE_OPTIONS: '--max-old-space-size=4096'
  # Build-time environment variables
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
  VITE_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
  VITE_DIGITRANSIT_KEY: ${{ secrets.DIGITRANSIT_KEY }}

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: fvh-arc-runners

    strategy:
      matrix:
        node-version: [18, 20]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit

      - name: Generate coverage report
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  integration-tests:
    name: Integration Tests
    runs-on: fvh-arc-runners

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test

  e2e-tests:
    name: End-to-End Tests
    runs-on: fvh-arc-runners
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # SwiftShader is bundled with Playwright's Chromium, no system GL libraries needed

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium firefox webkit

      - name: Build frontend
        run: npm run build

      - name: Start frontend server
        uses: ./.github/actions/start-server-with-healthcheck
        id: server
        with:
          server-command: 'npm run preview'
          server-url: 'http://localhost:4173'
          timeout: '30'

      - name: Run Playwright tests
        run: npm run test:e2e

      - name: Cleanup server process
        if: always()
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            # Check if process exists before killing
            if kill -0 $SERVER_PID 2>/dev/null; then
              echo "Terminating server process $SERVER_PID..."
              kill $SERVER_PID 2>/dev/null
              # Wait up to 5 seconds for graceful shutdown
              for i in {1..5}; do
                if ! kill -0 $SERVER_PID 2>/dev/null; then
                  echo "Server process $SERVER_PID terminated gracefully"
                  break
                fi
                sleep 1
              done
              # Force kill if still running
              if kill -0 $SERVER_PID 2>/dev/null; then
                echo "Force killing server process $SERVER_PID..."
                kill -9 $SERVER_PID 2>/dev/null || true
              fi
            else
              echo "Server process $SERVER_PID already terminated"
            fi
          fi

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  accessibility-tests:
    name: Accessibility Tests
    runs-on: fvh-arc-runners
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # SwiftShader is bundled with Playwright's Chromium, no system GL libraries needed

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Build frontend
        run: npm run build

      - name: Start frontend server
        uses: ./.github/actions/start-server-with-healthcheck
        id: server
        with:
          server-command: 'npm run preview'
          server-url: 'http://localhost:4173'
          timeout: '30'

      - name: Run accessibility tests - Desktop
        run: timeout 600 npm run test:accessibility:desktop
        env:
          PLAYWRIGHT_HTML_REPORT: playwright-report-desktop

      - name: Run accessibility tests - Tablet
        run: timeout 600 npm run test:accessibility:tablet
        env:
          PLAYWRIGHT_HTML_REPORT: playwright-report-tablet

      - name: Run accessibility tests - Mobile
        run: timeout 600 npm run test:accessibility:mobile
        env:
          PLAYWRIGHT_HTML_REPORT: playwright-report-mobile

      - name: Cleanup server process
        if: always()
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            # Check if process exists before killing
            if kill -0 $SERVER_PID 2>/dev/null; then
              echo "Terminating server process $SERVER_PID..."
              kill $SERVER_PID 2>/dev/null
              # Wait up to 5 seconds for graceful shutdown
              for i in {1..5}; do
                if ! kill -0 $SERVER_PID 2>/dev/null; then
                  echo "Server process $SERVER_PID terminated gracefully"
                  break
                fi
                sleep 1
              done
              # Force kill if still running
              if kill -0 $SERVER_PID 2>/dev/null; then
                echo "Force killing server process $SERVER_PID..."
                kill -9 $SERVER_PID 2>/dev/null || true
              fi
            else
              echo "Server process $SERVER_PID already terminated"
            fi
          fi

      - name: Upload accessibility test report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-test-report
          path: |
            playwright-report-*/
            test-results/
          retention-days: 30

  performance-tests:
    name: Performance Tests
    runs-on: fvh-arc-runners
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Build frontend
        run: npm run build

      - name: Start frontend server
        uses: ./.github/actions/start-server-with-healthcheck
        id: server
        with:
          server-command: 'npm run preview'
          server-url: 'http://localhost:4173'
          timeout: '30'

      - name: Run performance tests
        run: npm run test:performance

      - name: Cleanup server process
        if: always()
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            # Check if process exists before killing
            if kill -0 $SERVER_PID 2>/dev/null; then
              echo "Terminating server process $SERVER_PID..."
              kill $SERVER_PID 2>/dev/null
              # Wait up to 5 seconds for graceful shutdown
              for i in {1..5}; do
                if ! kill -0 $SERVER_PID 2>/dev/null; then
                  echo "Server process $SERVER_PID terminated gracefully"
                  break
                fi
                sleep 1
              done
              # Force kill if still running
              if kill -0 $SERVER_PID 2>/dev/null; then
                echo "Force killing server process $SERVER_PID..."
                kill -9 $SERVER_PID 2>/dev/null || true
              fi
            else
              echo "Server process $SERVER_PID already terminated"
            fi
          fi

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: performance-results/
          retention-days: 7


  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level moderate

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, accessibility-tests, security-scan]
    if: always()

    steps:
      - name: Check test results
        run: |
          if [[ "${{ needs.unit-tests.result }}" == "failure" ||
                "${{ needs.integration-tests.result }}" == "failure" ||
                "${{ needs.e2e-tests.result }}" == "failure" ||
                "${{ needs.accessibility-tests.result }}" == "failure" ||
                "${{ needs.security-scan.result }}" == "failure" ]]; then
            echo "❌ Some tests failed"
            exit 1
          else
            echo "✅ All tests passed"
          fi

      - name: Test Results Summary
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅' || '❌' }} ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅' || '❌' }} ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅' || '❌' }} ${{ needs.e2e-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Accessibility Tests | ${{ needs.accessibility-tests.result == 'success' && '✅' || '❌' }} ${{ needs.accessibility-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅' || '❌' }} ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
