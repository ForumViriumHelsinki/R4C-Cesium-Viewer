{{- if .Values.migration.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "helm-r4c.fullname" . }}-migration
  labels:
    {{- include "helm-r4c.labels" . | nindent 4 }}
    app.kubernetes.io/component: migration
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  ttlSecondsAfterFinished: 300
  backoffLimit: 10
  template:
    metadata:
      labels:
        {{- include "helm-r4c.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: migration
    spec:
      restartPolicy: Never
      initContainers:
      - name: wait-for-postgres
        image: postgres:15-alpine
        command:
        - sh
        - -c
        - |
          echo "üîç Waiting for PostgreSQL to be ready..."
          until pg_isready -h {{ .Values.migration.database.host }} -p {{ .Values.migration.database.port }} -U {{ .Values.migration.database.username }}; do
            echo "   PostgreSQL not ready, waiting..."
            sleep 5
          done
          echo "‚úÖ PostgreSQL is ready"
          
          echo "üîç Checking database connectivity..."
          export PGPASSWORD="${DB_PASSWORD}"
          until psql -h {{ .Values.migration.database.host }} -p {{ .Values.migration.database.port }} -U {{ .Values.migration.database.username }} -d {{ .Values.migration.database.name }} -c "SELECT 1;" > /dev/null 2>&1; do
            echo "   Database not accessible, waiting..."
            sleep 5
          done
          echo "‚úÖ Database connection verified"
        env:
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "helm-r4c.fullname" . }}-migration-secret
              key: password
      containers:
      - name: dbmate
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        command:
        - sh
        - -c
        - |
          set -e
          echo "üöÄ Starting database migration..."
          echo "üìã Database: {{ .Values.migration.database.name }}"
          echo "üìã Host: {{ .Values.migration.database.host }}:{{ .Values.migration.database.port }}"
          echo "üìã Migrations directory: /migrations"
          
          # Ensure PostGIS extensions exist
          echo "üîß Ensuring PostGIS extensions..."
          psql "$DATABASE_URL_ADMIN" -c "CREATE EXTENSION IF NOT EXISTS postgis;" || echo "‚ö†Ô∏è  PostGIS extension creation failed (may already exist)"
          psql "$DATABASE_URL_ADMIN" -c "CREATE EXTENSION IF NOT EXISTS postgis_topology;" || echo "‚ö†Ô∏è  PostGIS topology extension creation failed (may already exist)"
          
          # Run migrations
          echo "‚¨ÜÔ∏è  Running database migrations..."
          if dbmate status; then
            echo "üìä Current migration status:"
            dbmate status
          else
            echo "üÜï No migration history found, will create schema_migrations table"
          fi
          
          if dbmate up; then
            echo "‚úÖ Migrations applied successfully"
            echo "üìä Final migration status:"
            dbmate status
            
            # Verify key tables exist
            echo "üîç Verifying critical tables exist..."
            psql "$DATABASE_URL" -c "SELECT COUNT(*) as table_count FROM information_schema.tables WHERE table_schema = 'public' AND table_type = 'BASE TABLE';" | grep -E "table_count|[0-9]+"
            
            # Check specific table that pygeoapi needs
            if psql "$DATABASE_URL" -c "SELECT 1 FROM r4c_hsy_building_current LIMIT 1;" > /dev/null 2>&1; then
              echo "‚úÖ r4c_hsy_building_current table exists and is accessible"
            else
              echo "‚ùå r4c_hsy_building_current table missing or inaccessible"
              exit 1
            fi
          else
            echo "‚ùå Migration failed"
            exit 1
          fi
          
          echo "üéâ Database migration completed successfully"
        env:
        - name: DATABASE_URL
          value: "postgres://{{ .Values.migration.database.username }}:{{ .Values.migration.database.password }}@{{ .Values.migration.database.host }}:{{ .Values.migration.database.port }}/{{ .Values.migration.database.name }}?sslmode=disable"
        - name: DATABASE_URL_ADMIN
          value: "postgres://postgres:{{ .Values.migration.database.postgresPassword }}@{{ .Values.migration.database.host }}:{{ .Values.migration.database.port }}/{{ .Values.migration.database.name }}?sslmode=disable"
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "helm-r4c.fullname" . }}-migration-secret
              key: password
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "helm-r4c.fullname" . }}-migration-secret
              key: postgres-password
        - name: DBMATE_MIGRATIONS_DIR
          value: /migrations
        - name: DBMATE_NO_DUMP_SCHEMA
          value: "true"
        resources:
          {{- toYaml .Values.migration.resources | nindent 10 }}
{{- end }}