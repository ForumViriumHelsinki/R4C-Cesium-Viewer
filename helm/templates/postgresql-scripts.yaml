apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-scripts
data:
  create_table.sql: |
    -- Enable PostGIS (as of 3.0 contains just geometry/geography)
    CREATE EXTENSION postgis;
    -- enable raster support (for 3+)
    CREATE EXTENSION postgis_raster;
    -- Enable Topology
    CREATE EXTENSION postgis_topology;
    -- Enable PostGIS Advanced 3D
    -- and other geoprocessing algorithms
    -- sfcgal not available with all distributions
    CREATE EXTENSION postgis_sfcgal;
    -- fuzzy matching needed for Tiger
    CREATE EXTENSION fuzzystrmatch;
    -- rule based standardizer
    CREATE EXTENSION address_standardizer;
    -- example rule data set
    CREATE EXTENSION address_standardizer_data_us;
    -- Enable US Tiger Geocoder
    CREATE EXTENSION postgis_tiger_geocoder;

    ALTER EXTENSION postgis UPDATE;
    ALTER EXTENSION postgis_topology UPDATE;
    ALTER EXTENSION postgis_tiger_geocoder UPDATE;

    CREATE TABLE IF NOT EXISTS featureofinterest (
      id bigserial NOT NULL,
        name text,
      description text,
        encodingtype text,
        feature geometry NOT NULL,
        properties jsonb,
        PRIMARY KEY (id)
    );

    CREATE TABLE IF NOT EXISTS observedfeature (
      id bigserial NOT NULL,
        feature geometry NOT NULL,
        PRIMARY KEY (id)
    );

    CREATE TABLE IF NOT EXISTS location (
      id bigserial NOT NULL,
        name text,
        description text,
        encodingtype text,
        location jsonb NOT NULL,
        properties jsonb,    
        PRIMARY KEY (id)
    );

    CREATE TABLE IF NOT EXISTS finest_weather_station (
      id serial NOT NULL,
        station_name text,
      station_wmocode integer,
      location geometry NOT NULL,
        PRIMARY KEY (id)
    );

    CREATE TABLE IF NOT EXISTS datex_ii (
      id text NOT NULL,
        value text,
      measurementSiteNumberOfLanes integer,
      location geometry NOT NULL,
        PRIMARY KEY (id)
    );

    CREATE TABLE IF NOT EXISTS thing (
      id bigserial NOT NULL,
        properties jsonb,
        location text,
        PRIMARY KEY (id)
    );

    CREATE TABLE IF NOT EXISTS thingwithlocation (
      id bigserial NOT NULL,
        name text,
        description text,   
        location jsonb, 
      geom geometry NOT NULL,
        properties jsonb,
        featureofinterest jsonb,
        PRIMARY KEY (id)
    );

    CREATE TABLE IF NOT EXISTS kafka_finest_station (
      id bigserial NOT NULL,
        name text,
        description text,   
        location jsonb, 
        properties jsonb,
        PRIMARY KEY (id)
    );

    CREATE VIEW finest_station AS
      SELECT k.id,
        k.name,
        k.description,
        k.properties,
        k.location,
        ST_GeomFromGeoJSON(k.location) as geom
       FROM kafka_finest_station k; 
  fill_tables.sql: |
    INSERT INTO featureofinterest (name, description, encodingtype, feature, properties)
    VALUES('Viikki Environmental House', 'high-performance office building in Helsinki', 'application/vnd.geo+json', ST_GeomFromGeoJSON('{ "type": "Point", "coordinates": [25.015582, 60.224904] }'), '{"podio_category": "mSL Kokeilut / Viikin Ympäristötalo"}' );

    INSERT INTO featureofinterest (name, description, encodingtype, feature, properties)
    VALUES('Korkeasaari Zoo', 'Island Zoo in Helsinki', 'application/vnd.geo+json', ST_GeomFromGeoJSON('{ "type": "Point", "coordinates": [24.990982, 60.181069] }'), '{ "podio_category" : "mSL Kokeilut / Korkeasaari" }' );

    INSERT INTO featureofinterest (name, description, encodingtype, feature, properties)
    VALUES('Mäkelänkadun supermittausasema', 'HSY Supersite', 'application/vnd.geo+json', ST_GeomFromGeoJSON('{ "type": "Point", "coordinates": [24.950971, 60.196757] }'), '{ "podio_category" : "mSL Kokeilut / Mäkelänkadun supermittausasema" }' );

    INSERT INTO featureofinterest (name, description, encodingtype, feature, properties) 
    VALUES('Ilmastoviisaat Taloyhtiöt / Vantaa Talo 1', 'Location not accurate', 'application/vnd.geo+json', ST_GeomFromGeoJSON('{ "type": "Point", "coordinates": [25.040278, 60.294444] }'), '{ "podio_category" : "Ilmastoviisaat Taloyhtiöt / Vantaa Talo 1" }' );

    INSERT INTO featureofinterest (name, description, encodingtype, feature, properties) 
    VALUES('TAMK Autolaboratorio', 'Hankekumppanit', 'application/vnd.geo+json', ST_GeomFromGeoJSON('{ "type": "Point", "coordinates": [23.808953, 61.504096] }'), '{ "podio_category" : "Hankekumppanit / TAMK Autolaboratorio" }' );

    INSERT INTO featureofinterest (name, description, encodingtype, feature, properties) 
    VALUES('FVH, Unioninkatu 24', 'Itäinen toimistosiipi', 'application/vnd.geo+json', ST_GeomFromGeoJSON('{ "type": "Point", "coordinates": [24.950994, 60.166590] }'), '{ "podio_category" : "FVH, Unioninkatu 24 / Itäinen toimistosiipi" }' );

    INSERT INTO featureofinterest (name, description, encodingtype, feature, properties) 
    VALUES('Kaapelitehdas', 'Cultural centre, Ruoholahti', 'application/vnd.geo+json', ST_GeomFromGeoJSON('{ "type": "Point", "coordinates": [24.902935, 60.161606] }'), '{ "podio_category" : "Ruoholahti / Kaapelitehdas" }' );

    INSERT INTO featureofinterest (name, description, encodingtype, feature, properties) 
    VALUES('Ilmastoviisaat Taloyhtiöt', 'Location not accurate', 'application/vnd.geo+json', ST_GeomFromGeoJSON('{ "type": "Point", "coordinates": [24.941526, 60.170435] }'), '{ "podio_category" : "Ilmastoviisaat Taloyhtiöt" }' );

    INSERT INTO featureofinterest (name, description, encodingtype, feature, properties)
    VALUES('mSL Kokeilut / Kaapelitehdas', 'Cultural centre, Ruoholahti', 'application/vnd.geo+json', ST_GeomFromGeoJSON('{ "type": "Point", "coordinates": [24.902955, 60.161626] }'), '{ "podio_category" : "mSL Kokeilut / Kaapelitehdas" }' );

    INSERT INTO featureofinterest (name, description, encodingtype, feature, properties) 
    VALUES('mSL Kokeilut', 'Location not accurate', 'application/vnd.geo+json', ST_GeomFromGeoJSON('{ "type": "Point", "coordinates": [24.911487, 60.157800] }'), '{ "podio_category" : "mSL Kokeilut" }' );

    INSERT INTO featureofinterest (name, description, encodingtype, feature, properties) 
    VALUES('mSL Kokeilut / Robobusline Kivikko', 'Location not accurate', 'application/vnd.geo+json', ST_GeomFromGeoJSON('{ "type": "Point", "coordinates": [25.0524505, 60.236834] }'), '{ "podio_category" : "mSL Kokeilut / Robobusline Kivikko" }' );

    INSERT INTO featureofinterest (name, description, encodingtype, feature, properties) 
    VALUES('Vekotinverstas', 'Ruoholahti / Kaapelitehdas / Vekotinverstas', 'application/vnd.geo+json', ST_GeomFromGeoJSON('{ "type": "Point", "coordinates": [24.979938, 60.186576] }'), '{ "podio_category" : "Ruoholahti / Kaapelitehdas / Vekotinverstas" }' );

    INSERT INTO featureofinterest (name, description, encodingtype, feature, properties)
    VALUES('FVH, Unioninkatu 24', 'FVH', 'application/vnd.geo+json', ST_GeomFromGeoJSON('{ "type": "Point", "coordinates": [24.950818, 60.166641] }'), '{ "podio_category" : "FVH, Unioninkatu 24" }' );

    INSERT INTO observedfeature (feature) 
    VALUES(ST_GeomFromGeoJSON('{ "type": "Polygon", "coordinates": [[[24.956651, 60.194194], [24.957127, 60.194216], [24.957423, 60.194545], [24.957109, 60.194715], [24.956385, 60.194579], [24.956330, 60.194343]]] }') );
