import json

def load_geojson(file_path):
    with open(file_path, 'r') as f:
        return json.load(f)

def save_geojson(data, file_path):
    with open(file_path, 'w') as f:
        json.dump(data, f)

def combine_geojsons(main_geojson, na_geojson):
    # Combine features from both GeoJSON files
    main_geojson['features'].extend(na_geojson['features'])
    return main_geojson

def normalize_column(features, column_name):
    # Extract all values for the column
    values = [feature['properties'].get(column_name) for feature in features if feature['properties'].get(column_name) is not None]

    if not values:  # If there are no values, skip normalization
        return

    min_value = min(values)
    max_value = max(values)

    print(f"Before normalization - {column_name}: min = {min_value}, max = {max_value}")


    # Normalize the values to a 0-1 range
    for feature in features:
        value = feature['properties'].get(column_name)
        if value is not None:
            if max_value - min_value == 0:  # Avoid division by zero if all values are the same
                feature['properties'][column_name] = 0.5  # Set to mid-value if no range
            else:
                normalized_value = (value - min_value) / (max_value - min_value)
                feature['properties'][column_name] = normalized_value

def remove_columns(features, columns_to_remove):
    """Removes the specified columns from the properties of each feature."""
    for feature in features:
        for column in columns_to_remove:
            if column in feature['properties']:
                del feature['properties'][column]

def main():
    # File paths
    na_geojson_path = 'h2906_wgs84_na_with_index.json'
    main_geojson_path = 'r4c_stats_grid_with_index.json'

    # Load the GeoJSON files
    na_geojson = load_geojson(na_geojson_path)
    main_geojson = load_geojson(main_geojson_path)

    # Print the lengths of the GeoJSON files
    print(f"Length of na_geojson: {len(na_geojson['features'])}")
    print(f"Length of main_geojson: {len(main_geojson['features'])}")

    # Combine the features
    combined_geojson = combine_geojsons(main_geojson, na_geojson)

    # Print the lengths of the GeoJSON files
    print(f"Length of na_geojson: {len(na_geojson['features'])}")
    print(f"Length of main_geojson: {len(main_geojson['features'])}")
    print(f"Length of combined_geojson: {len(combined_geojson['features'])}")

    # Normalize newly created columns
    new_columns_to_normalize = ['flood_exposure', 'heat_exposure', 'green']
    for column in new_columns_to_normalize:
        normalize_column(combined_geojson['features'], column)

    columns_to_remove = [
        "ika_0_6", "ika_7_14", "ika_y75", "opisk", "tyovulk", "tyott", "pitktyot", "perusast",
        "yks_ak", "suur_ak", "kerrostal", "vuokr", "vuokr_ara", "autoton", "asvalj", "mtu"
    ]
    remove_columns(combined_geojson['features'], columns_to_remove)

    # Save the combined and normalized GeoJSON back to the output file
    save_geojson(combined_geojson, main_geojson_path)
    print(f"Combined and normalized GeoJSON saved to {main_geojson_path}")

if __name__ == "__main__":
    main()
