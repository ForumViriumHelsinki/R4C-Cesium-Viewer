import geopandas as gpd
import pandas as pd
import math

# Function to normalize columns
def normalize_columns(df, columns):
    for col in columns:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    return df

# Function to calculate income using log transformation
def calculate_income(row):
    mtu_value = row.get('mtu')

    if mtu_value is None or mtu_value == 0 or mtu_value == -1:
        return -1  # Set income to -1 if mtu is None, 0, or -1
    else:
        return math.log(mtu_value)  # Apply log transformation if mtu is positive

# Define the input and output file paths
input_file = 'h2906.gpkg'
output_gpkg_file = 'h2906_wgs84.gpkg'
output_json_file = 'h2906_wgs84.geojson'
output_na_json_file = 'h2906_wgs84_na.geojson'  # Rows with -1 values
output_missing_json_file = 'h2906_wgs84_missing.geojson'  # Rows with null values

# Load the GeoPackage file
gdf = gpd.read_file(input_file)

# Print the current CRS to understand the source CRS
print(f"Current CRS: {gdf.crs}")

# Transform the GeoDataFrame to WGS84 (EPSG:4326)
gdf_wgs84 = gdf.to_crs(epsg=4326)

# Separate rows where any column has a value of -1
gdf_na = gdf_wgs84[(gdf_wgs84 == -1).any(axis=1)].copy()

# Save the rows with -1 values
gdf_na.to_file(output_na_json_file, driver='GeoJSON')
print(f"Rows with -1 values saved as {output_na_json_file}")

# Drop rows with -1 values from the main dataframe
gdf_no_na = gdf_wgs84[(gdf_wgs84 != -1).all(axis=1)].copy()

# Apply income calculation to the filtered data
gdf_no_na['mtu'] = gdf_no_na.apply(calculate_income, axis=1)

# Apply normalization to the specified columns
columns_to_normalize = [
    'ika_0_6', 'ika_7_14', 'ika_y75', 'opisk', 'tyovulk', 'tyott', 'pitktyot', 'perusast',
    'yks_ak', 'suur_ak', 'kerrostal', 'vuokr', 'vuokr_ara', 'autoton', 'asvalj', 'mtu',
]

gdf_no_na = normalize_columns(gdf_no_na, columns_to_normalize)

# Separate rows where any column has a null value (NaN) from the remaining data
gdf_missing = gdf_no_na[gdf_no_na.isnull().any(axis=1)].copy()

# Check if gdf_missing is empty before attempting to save
if gdf_missing.empty:
    print("No rows with null values found.")
else:
    # Save the rows with null values
    gdf_missing.to_file(output_missing_json_file, driver='GeoJSON')
    print(f"Rows with null values saved as {output_missing_json_file}")

# Drop rows with null values from the filtered data
gdf_filtered = gdf_no_na.dropna().copy()

# Save the filtered and processed GeoDataFrame to new files
gdf_filtered.to_file(output_json_file, driver='GeoJSON')
print(f"Filtered and transformed GeoJSON saved as {output_json_file}")
