import json
import pandas as pd

# Weights from Table 3 in the PDF (You might need to refine these based on the actual table values)
flood_weights = {
    'i_1': 0.25,  # Location within 1km from a railway station
    'i_2': 0.25,  # Accessibility zone
    'i_3': 0.25,  # Percentage of households with no car
    'i_4': 0.25,  # Access in case of emergency
    'i_5': 1,     # Percentage of people with basic studies
    'i_6': 0.5,   # Percentage of children 0-6 years old
    'i_7': 0.5,   # Percentage of people over 75 years old
    'i_8': 0.25,  # Percentage of unemployed in the labour force
    'i_9': 0.25,  # Percentage of economically inactive people in the population
    'i_10': 0.25, # Percentage of long-term unemployed in the labour force
    'i_11': 0.25, # Median household income
    'i_12': 0.5,  # Occupancy rate
    'i_13': 0.5,  # Percentage of households containing 7 or more people
    'i_14': 0,    # Percentage of dwellings in flats
    'i_15': 0,    # Percentage of water area in the grid cell (not used for flood in the PDF)
    'i_16': 1,  # Percentage of total green space area in the land area
    'i_17': 0.00,  # Percentage of low vegetation area in the land area (not used for flood in the PDF)
    'i_18': 0.00,  # Percentage of area covered by trees in the land area (not used for flood in the PDF)
    'i_19': 1/3,  # Percentage of students in the population
    'i_20': 1/3,  # Percentage of single person households
    'i_21': 1/3,  # Percentage of school age children in the population
    'i_22': 0.5,  # Percentage of rented households
    'i_23': 0.5,  # Percentage of dwellings rented from ARA
}

heat_weights = {
    'i_1': 0,      # Location within 1km from a railway station
    'i_2': 0,      # Accessibility zone
    'i_3': 0,      # Percentage of households with no car
    'i_4': 0,      # Access in case of emergency
    'i_5': 1,      # Percentage of people with basic studies
    'i_6': 0.5,    # Percentage of children 0-6 years old
    'i_7': 0.5,    # Percentage of people over 75 years old
    'i_8': 0.25,   # Percentage of unemployed in labour force
    'i_9': 0.25,   # Percentage of economically inactive people in the population
    'i_10': 0.25,  # Percentage of long-term unemployed in the labour force
    'i_11': 0.25,  # Median household income
    'i_12': 0,     # Occupancy rate (not used for heat in the PDF)
    'i_13': 0,     # Percentage of households containing 7 or more people
    'i_14': 1,     # Percentage of dwellings in flats
    'i_15': 1/3,  # Percentage of water area in the grid cell
    'i_16': 0,     # Percentage of total green space area in the land area (not used for heat in the PDF)
    'i_17': 1/3,  # Percentage of low vegetation area in the land area
    'i_18': 1/3,  # Percentage of area covered by trees in the land area
    'i_19': 0,     # Percentage of students in the population (not used for heat in the PDF)
    'i_20': 0.5,   # Percentage of single person households
    'i_21': 0.5,   # Percentage of school age children in the population
    'i_22': 0.5,   # Percentage of rented households
    'i_23': 0.5    # Percentage of dwellings rented from ARA
}

# Indicators to be reversed (based on page 20 of the PDF)
reverse_indicators = ['i_1', 'i_11', 'i_12', 'i_15', 'i_16', 'i_17', 'i_18', 'i_21']

# Attribute to indicator code mapping (using indicator codes from the PDF)
attribute_mapping = {
    'autoton': 'i_3',
    'perusast': 'i_5',
    'ika_0_6': 'i_6',
    'ika_y75': 'i_7',
    'tyott': 'i_8',
    'tyovulk': 'i_9',  # Adjust calculation to get economically inactive
    'pitktyot': 'i_10',
    'mtu': 'i_11',
    'asvalj': 'i_12',
    'suur_ak': 'i_13', 
    'kerrostal:': 'i_14',  
    'water': 'i_15',
    'total_green': 'i_16',
    'vegetation': 'i_17',
    'trees': 'i_18',            
    'opisk': 'i_19',
    'yks_ak': 'i_20',
    'ika_7_14': 'i_21',
    'vuokr': 'i_22',
    'vuokr_ara': 'i_23' 
}

def calculate_indices(feature):
    # Calculate indices
    sensitivity = 0
    flood_exposure = 0
    flood_prepare = 0
    flood_respond = 0
    flood_recover = 0
    heat_exposure = 0
    heat_prepare = 0
    heat_respond = 0
    age = 0
    income = 0
    info = 0
    tenure = 0
    green = 0
    social_networks = 0
    overcrowding = 0

    # Remove socioeconomic attributes
    socioeconomic_attributes = [
        'ika_0_6', 'ika_7_14', 'ika_y75', 'opisk', 'tyovulk', 'tyott', 'yks_ak', 'vuosi',
        'suur_ak', 'kerrostal', 'vuokr', 'vuokr_ara', 'autoton', 'asvalj', 'mtu',
        'id_nro', 'pitktyot', 'perusast',
    ]

    for attribute, value in feature['properties'].items():
        if attribute in attribute_mapping and value != -1: #skip the null values
            indicator_code = attribute_mapping[attribute]

            # Reverse the value if the indicator is in the reverse_indicators list
            if indicator_code in reverse_indicators and value is not None:
                value = 1 - value
                      
            if indicator_code == 'i_16' and value is not None:
                flood_exposure = value                                        

            if ((indicator_code == 'i_15')
                   or (indicator_code == 'i_17') or (indicator_code == 'i_18')) and (value is not None):
                weighted_value = value * heat_weights[indicator_code]
                heat_exposure = value

            if ((indicator_code == 'i_15') or (indicator_code == 'i_17') or (indicator_code == 'i_18')) and (value is not None):
                weighted_value = value * heat_weights[indicator_code]
                green += weighted_value
                
    # Add the calculated indices to the feature's properties
    feature['properties']['flood_exposure'] = flood_exposure
    feature['properties']['heat_exposure'] = heat_exposure
    feature['properties']['green'] = green 
    
    for attribute in socioeconomic_attributes:
        del feature['properties'][attribute]
        
# Read the input GeoJSON file
with open('h2906_wgs84_na_with_lc.geojson', 'r') as f:
    geojson_data = json.load(f)

# Process each feature
for feature in geojson_data['features']:
    calculate_indices(feature)
    
print(f"Length of na: {len(geojson_data['features'])}")

# Write the output GeoJSON file
with open('h2906_wgs84_na_with_index.json', 'w') as f:
    json.dump(geojson_data, f)