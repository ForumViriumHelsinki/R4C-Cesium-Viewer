import json
import pandas as pd

def normalize_columns(df, columns):
    for col in columns:
        # Create a mask to exclude -1 values from the normalization process
        mask = df[col] != -1
        
        # Normalize only the values that are not -1
        df.loc[mask, col] = (df.loc[mask, col] - df.loc[mask, col].min()) / (df.loc[mask, col].max() - df.loc[mask, col].min())
        
        # Ensure that -1 values are not modified
        df.loc[~mask, col] = -1
    return df

def calculate_land_cover_percentages(feature):
    # Calculate aggregated attributes with checks for null/missing values
    feature['properties']['water'] = ((feature['properties'].get('water_m2_2022') or 0) + (feature['properties'].get('sea_m2_2022') or 0)) / 62500
    feature['properties']['vegetation'] = ((feature['properties'].get('vegetation_m2_2022') or 0) + (feature['properties'].get('field_m2_2022') or 0)) / 62500

    tree_attributes = ['tree10_m2_2022', 'tree15_m2_2022', 'tree2_m2_2022', 'tree20_m2_2022']
    feature['properties']['trees'] = (sum((feature['properties'].get(attr) or 0) for attr in tree_attributes)) / 62500

    feature['properties']['total_green'] = feature['properties']['trees'] + feature['properties']['vegetation'] + feature['properties']['water']

def main():
    # Get input and output file paths from the user
    input_file = input("Enter the path to the input GeoJSON file: ")
    output_file = input("Enter the path to save the output GeoJSON file: ")
    
    # Read the input GeoJSON file
    with open(input_file, 'r') as f:
        geojson_data = json.load(f)

    # Process each feature
    for feature in geojson_data['features']:
        calculate_land_cover_percentages(feature)

    # Extract data into a DataFrame for normalization
    data = [feature['properties'] for feature in geojson_data['features']]
    df = pd.DataFrame(data)

    # Normalize newly created columns 
    new_columns_to_normalize = ['water', 'total_green', 'vegetation', 'trees']
    df = normalize_columns(df, new_columns_to_normalize)

    # Update GeoJSON features with normalized values
    for i, feature in enumerate(geojson_data['features']):
        for col in new_columns_to_normalize:
            if col in df.columns:  # Check if column exists
                feature['properties'][col] = df.loc[i, col]

    # Write the output GeoJSON file
    with open(output_file, 'w') as f:
        json.dump(geojson_data, f)
        
    print(f"Processed data saved to {output_file}")

if __name__ == "__main__":
    main()