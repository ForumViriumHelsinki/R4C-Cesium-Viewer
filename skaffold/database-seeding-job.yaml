apiVersion: batch/v1
kind: Job
metadata:
  name: database-seeding
  namespace: default
  labels:
    app: database-seeding
spec:
  ttlSecondsAfterFinished: 300  # Clean up job after 5 minutes
  template:
    metadata:
      labels:
        app: database-seeding
    spec:
      restartPolicy: Never
      containers:
      - name: seeding
        image: python:3.11-slim
        command:
        - /bin/bash
        - -c
        - |
          set -e
          echo "üå± Starting database seeding job..."

          # Install required packages
          pip install psycopg2-binary

          # Wait for PostgreSQL to be ready
          echo "üì° Waiting for PostgreSQL..."
          until pg_isready -h postgresql -p 5432 -U regions4climate_user; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

          echo "‚úÖ PostgreSQL is ready, starting seeding..."

          # Run the seeding script
          python3 /scripts/seed-dev-data.py \
            --database-url "postgres://regions4climate_user:regions4climate_pass@postgresql:5432/regions4climate" \
            --clear-first \
            --num-records 100

          echo "üéâ Database seeding completed!"
        env:
        - name: PGPASSWORD
          value: "regions4climate_pass"
        volumeMounts:
        - name: scripts
          mountPath: /scripts
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
      volumes:
      - name: scripts
        configMap:
          name: seeding-scripts
          defaultMode: 0755
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: seeding-scripts
  namespace: default
data:
  seed-dev-data.py: |
    #!/usr/bin/env python3
    """
    Seed development database with mock data for testing.
    This script populates key tables with realistic test data.
    """

    import os
    import sys
    import random
    import json
    from datetime import datetime, date, timedelta
    from decimal import Decimal
    import psycopg2
    from psycopg2.extras import RealDictCursor
    import argparse

    # Configuration
    DEFAULT_DATABASE_URL = "postgres://regions4climate_user:regions4climate_pass@postgresql:5432/regions4climate"

    # Helsinki area bounding box
    HELSINKI_BBOX = {
        'min_lat': 60.1,
        'max_lat': 60.3,
        'min_lon': 24.8,
        'max_lon': 25.3
    }

    # Sample postal codes in Helsinki area
    HELSINKI_POSTAL_CODES = [
        "00100", "00120", "00130", "00140", "00150", "00160", "00170", "00180", "00190",
        "00200", "00210", "00220", "00230", "00240", "00250", "00260", "00270", "00280",
        "00290", "00300", "00320", "00330", "00340", "00350", "00360", "00370", "00380",
        "00390", "00400", "00410", "00420", "00430", "00440", "00450", "00460", "00470",
        "00480", "00490", "00500", "00510", "00520", "00530", "00540", "00550", "00560",
        "00570", "00580", "00590", "00600", "00610", "00620", "00630", "00640", "00650",
        "00660", "00670", "00680", "00690", "00700", "00710", "00720", "00730", "00740",
        "00750", "00760", "00770", "00780", "00790", "00800", "00810", "00820", "00830",
        "00840", "00850", "00860", "00870", "00880", "00890", "00900", "00910", "00920",
        "00930", "00940", "00950", "00960", "00970", "00980", "00990"
    ]

    def get_db_connection(database_url=None):
        """Get database connection."""
        url = database_url or os.getenv('DATABASE_URL', DEFAULT_DATABASE_URL)
        try:
            conn = psycopg2.connect(url)
            return conn
        except Exception as e:
            print(f"‚ùå Failed to connect to database: {e}")
            sys.exit(1)

    def random_point_in_helsinki():
        """Generate a random point within Helsinki area."""
        lat = random.uniform(HELSINKI_BBOX['min_lat'], HELSINKI_BBOX['max_lat'])
        lon = random.uniform(HELSINKI_BBOX['min_lon'], HELSINKI_BBOX['max_lon'])
        return f"POINT({lon} {lat})"

    def random_polygon_in_helsinki():
        """Generate a random polygon within Helsinki area."""
        # Create a small rectangle
        center_lat = random.uniform(HELSINKI_BBOX['min_lat'], HELSINKI_BBOX['max_lat'])
        center_lon = random.uniform(HELSINKI_BBOX['min_lon'], HELSINKI_BBOX['max_lon'])

        # Small offset for polygon corners (about 100m)
        offset = 0.001

        points = [
            f"{center_lon - offset} {center_lat - offset}",
            f"{center_lon + offset} {center_lat - offset}",
            f"{center_lon + offset} {center_lat + offset}",
            f"{center_lon - offset} {center_lat + offset}",
            f"{center_lon - offset} {center_lat - offset}"  # Close the polygon
        ]

        return f"POLYGON(({', '.join(points)}))"

    def seed_adaptation_landcover(conn, num_records=100):
        """Seed adaptation_landcover table."""
        print(f"üå± Seeding adaptation_landcover with {num_records} records...")

        cur = conn.cursor()

        # Land cover codes (simplified)
        land_cover_codes = ["FOREST", "WATER", "URBAN", "GRASS", "AGRICULTURAL", "BARE"]

        for i in range(num_records):
            grid_id = f"GRID_{i:06d}"
            area_m2 = random.uniform(100, 10000)
            year = random.choice([2020, 2021, 2022, 2023, 2024])
            koodi = random.choice(land_cover_codes)
            geom = random_polygon_in_helsinki()

            cur.execute("""
                INSERT INTO adaptation_landcover (grid_id, area_m2, year, koodi, geom)
                VALUES (%s, %s, %s, %s, ST_GeomFromText(%s, 4326))
            """, (grid_id, area_m2, year, koodi, geom))

        conn.commit()
        print(f"‚úÖ Seeded {num_records} adaptation_landcover records")

    def seed_r4c_coldspot(conn, num_records=50):
        """Seed r4c_coldspot table."""
        print(f"üå± Seeding r4c_coldspot with {num_records} records...")

        cur = conn.cursor()

        for i in range(num_records):
            posno = random.choice(HELSINKI_POSTAL_CODES)
            heatexposure = random.uniform(0.0, 0.4)  # Cold spots have low heat exposure
            temp_c = random.uniform(15.0, 25.0)
            date_val = date.today() - timedelta(days=random.randint(0, 365))
            geom = random_point_in_helsinki()

            cur.execute("""
                INSERT INTO r4c_coldspot (posno, heatexposure, temp_c, date, geom)
                VALUES (%s, %s, %s, %s, ST_GeomFromText(%s, 4326))
            """, (posno, heatexposure, temp_c, date_val, geom))

        conn.commit()
        print(f"‚úÖ Seeded {num_records} r4c_coldspot records")

    def clear_existing_data(conn):
        """Clear existing test data."""
        print("üßπ Clearing existing test data...")

        cur = conn.cursor()

        tables_to_clear = [
            'r4c_coldspot',
            'adaptation_landcover'
        ]

        for table in tables_to_clear:
            try:
                cur.execute(f"DELETE FROM {table}")
                print(f"  Cleared {table}")
            except Exception as e:
                print(f"  ‚ö†Ô∏è Could not clear {table}: {e}")
                conn.rollback()

        conn.commit()
        print("‚úÖ Cleared existing test data")

    def main():
        parser = argparse.ArgumentParser(description='Seed development database with mock data')
        parser.add_argument('--database-url', help='Database connection URL')
        parser.add_argument('--clear-first', action='store_true', help='Clear existing data first')
        parser.add_argument('--num-records', type=int, default=100, help='Number of records to create per table')

        args = parser.parse_args()

        print("üå± Starting database seeding...")

        conn = get_db_connection(args.database_url)

        if args.clear_first:
            clear_existing_data(conn)

        # Seed core tables
        seed_adaptation_landcover(conn, args.num_records)
        seed_r4c_coldspot(conn, args.num_records // 2)

        conn.close()
        print("üéâ Database seeding completed!")

    if __name__ == '__main__':
        main()
